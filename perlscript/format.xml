<?xml version="1.0"?><test-framework name="boosttest"><async_fut type="file"><test-case-passed  line="58" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">!ec</test-case-passed> <test-case-passed  line="63" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">fut.valid()</test-case-passed> <test-case-passed  line="64" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">fut_in.valid()</test-case-passed> <test-case-passed  line="65" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">'noexceptionsthrownbyfut_in.get()'</test-case-passed> <test-case-passed  line="69" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">'noexceptionsthrownbyline=fut.get()'</test-case-passed> <test-case-passed  line="72" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">line.size()>=val.size()</test-case-passed> <test-case-passed  line="74" case="async_out_future" caseline="32"  file="async_fut.cpp" testingTime="34000">boost::algorithm::starts_with(line,val)</test-case-passed></async_fut><bind_stderr type="file"><test-case-passed  line="94" case="async_io" caseline="43"  file="bind_stderr.cpp" testingTime="26000">!ec</test-case-passed> <test-case-passed  line="72" case="async_io" caseline="43"  file="bind_stderr.cpp" testingTime="26000">!ec</test-case-passed> <test-case-passed  line="76" case="async_io" caseline="43"  file="bind_stderr.cpp" testingTime="26000">boost::algorithm::starts_with(line,"abc")</test-case-passed> <test-case-passed  line="57" case="sync_io" caseline="80"  file="bind_stderr.cpp" testingTime="18000">!ec</test-case-passed> <test-case-passed  line="61" case="sync_io" caseline="80"  file="bind_stderr.cpp" testingTime="18000">s=="hello"</test-case-passed> <test-case-passed  line="140" case="file_io" caseline="103"  file="bind_stderr.cpp" testingTime="30000">!ec</test-case-passed> <test-case-passed  line="148" case="file_io" caseline="103"  file="bind_stderr.cpp" testingTime="30000">s=="hello"</test-case-passed> <test-case-passed  line="113" case="nul" caseline="125"  file="bind_stderr.cpp" testingTime="28000">!ec</test-case-passed> <test-case-passed  line="118" case="nul" caseline="125"  file="bind_stderr.cpp" testingTime="28000">0==exit_code</test-case-passed></bind_stderr><args_cmd type="file"><test-case-passed  line="90" case="cmd" caseline="28"  file="args_cmd.cpp" testingTime="18000">!ec</test-case-passed> <test-case-passed  line="96" case="cmd" caseline="28"  file="args_cmd.cpp" testingTime="18000">s=="test"</test-case-passed> <test-case-passed  line="100" case="cmd" caseline="28"  file="args_cmd.cpp" testingTime="18000">s=="--echo-argv"</test-case-passed> <test-case-passed  line="105" case="cmd" caseline="28"  file="args_cmd.cpp" testingTime="18000">s=="hellothingy"</test-case-passed> <test-case-passed  line="110" case="cmd" caseline="28"  file="args_cmd.cpp" testingTime="18000">s=="\"stuff\""</test-case-passed> <test-case-passed  line="115" case="cmd" caseline="28"  file="args_cmd.cpp" testingTime="18000">s=="space"</test-case-passed> <test-case-passed  line="45" case="args" caseline="75"  file="args_cmd.cpp" testingTime="21000">!ec</test-case-passed> <test-case-passed  line="51" case="args" caseline="75"  file="args_cmd.cpp" testingTime="21000">s=="test"</test-case-passed> <test-case-passed  line="55" case="args" caseline="75"  file="args_cmd.cpp" testingTime="21000">s=="--echo-argv"</test-case-passed> <test-case-passed  line="60" case="args" caseline="75"  file="args_cmd.cpp" testingTime="21000">s=="hellothingy"</test-case-passed> <test-case-passed  line="65" case="args" caseline="75"  file="args_cmd.cpp" testingTime="21000">s=="\"stuff\""</test-case-passed> <test-case-passed  line="70" case="args" caseline="75"  file="args_cmd.cpp" testingTime="21000">s=="space"</test-case-passed></args_cmd></test-framework>